// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package server

import (
	"fmt"
	"net/http"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/gin-gonic/gin"
)

// LoginData defines model for LoginData.
type LoginData struct {
	Login    *string `json:"login,omitempty"`
	Password *string `json:"password,omitempty"`
}

// User defines model for User.
type User struct {
	Login    *string                 `json:"login,omitempty"`
	Option   *map[string]interface{} `json:"option,omitempty"`
	Password *string                 `json:"password,omitempty"`
	Token    *string                 `json:"token,omitempty"`
}

// Id defines model for id.
type Id = string

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	Error *string `json:"error,omitempty"`
}

// SuccessResponse defines model for SuccessResponse.
type SuccessResponse = map[string]interface{}

// LoginJSONRequestBody defines body for Login for application/json ContentType.
type LoginJSONRequestBody = LoginData

// CreateJSONRequestBody defines body for Create for application/json ContentType.
type CreateJSONRequestBody = User

// UpdateJSONRequestBody defines body for Update for application/json ContentType.
type UpdateJSONRequestBody = User

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// check server
	// (GET /check/)
	Check(c *gin.Context)
	// Login and get tokens
	// (POST /login/)
	Login(c *gin.Context)
	// Spoil tokens
	// (POST /logout/)
	Logout(c *gin.Context)
	// User
	// (GET /users/)
	List(c *gin.Context)
	// Create
	// (POST /users/)
	Create(c *gin.Context)
	// Delete user
	// (DELETE /users/{id}/)
	Delete(c *gin.Context, id Id)
	// User
	// (GET /users/{id}/)
	Get(c *gin.Context, id Id)
	// Update user
	// (PATCH /users/{id}/)
	Update(c *gin.Context, id Id)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// Check operation middleware
func (siw *ServerInterfaceWrapper) Check(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.Check(c)
}

// Login operation middleware
func (siw *ServerInterfaceWrapper) Login(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.Login(c)
}

// Logout operation middleware
func (siw *ServerInterfaceWrapper) Logout(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.Logout(c)
}

// List operation middleware
func (siw *ServerInterfaceWrapper) List(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.List(c)
}

// Create operation middleware
func (siw *ServerInterfaceWrapper) Create(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.Create(c)
}

// Delete operation middleware
func (siw *ServerInterfaceWrapper) Delete(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id Id

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.Delete(c, id)
}

// Get operation middleware
func (siw *ServerInterfaceWrapper) Get(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id Id

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.Get(c, id)
}

// Update operation middleware
func (siw *ServerInterfaceWrapper) Update(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id Id

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.Update(c, id)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router *gin.Engine, si ServerInterface) *gin.Engine {
	return RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router *gin.Engine, si ServerInterface, options GinServerOptions) *gin.Engine {

	errorHandler := options.ErrorHandler

	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/check/", wrapper.Check)

	router.POST(options.BaseURL+"/login/", wrapper.Login)

	router.POST(options.BaseURL+"/logout/", wrapper.Logout)

	router.GET(options.BaseURL+"/users/", wrapper.List)

	router.POST(options.BaseURL+"/users/", wrapper.Create)

	router.DELETE(options.BaseURL+"/users/:id/", wrapper.Delete)

	router.GET(options.BaseURL+"/users/:id/", wrapper.Get)

	router.PATCH(options.BaseURL+"/users/:id/", wrapper.Update)

	return router
}
